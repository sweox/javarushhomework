http://coub.com/view/8y58q
http://coub.com/view/6h7dc
http://coub.com/view/aouex
http://coub.com/view/5v1l9
http://coub.com/view/1o6lq
http://coub.com/view/2o41q
http://coub.com/view/8q1r3

http://coub.com/4fa4d18fc2a43b45862e12b1a226b2cc#simples
https://www.youtube.com/watch?v=aMhHq1R-9Rs
https://www.youtube.com/watch?v=VLMX7m1vmCo
https://www.youtube.com/watch?v=Wga5A6R9BJg

OutOfMemoryError как джавист вы должны поставить больше памяти
StackOverFlowError - вы должны переписать алгоритм(ваш алгоритм допускает слишком
глубокое погружение в эксепшн)
ClassNotFound... - забыли положить какой-то Jar-ник
----
Принципв SOLID
Полиморфизм, инкапсуляция, наследование, абстакция
----------------
Entity       hash.equal.tostr
Value Object  hash.equal.tostr   Programming language
Maneger/Service
Base/Abstract/Sceleton
Containers(в Java Collection) hash.equal.tostr
---
история переписывания метода sort на habrahabr

                    LEVEL 15
    level15.lesson12.bonus01
    Почему-то мой метод не работал
=================================================================

                    LEVEL 16
https://habrahabr.ru/post/132374/     Маленькие хитрости Java. Часть 2
com.javarush.test.level16.lesson13.home03;
Потоки
    //count--;
    System.out.println(new GenerateThread());
    //count--;
    Почему-то count в первом случае нормально уменьшается, а во фтором случае count в два раза больше.
---------------------------------------------------------
    level16.lesson13.bonus02
    Хорошая задача про потоки. Внизу задачи много полезных коментариев.
---------------------------------------------------------
    level16.lesson13.bonus03
    Очень хорошая задача про обрабатывание исключений с помощью UncaughtExceptionHandler
==================================================================
                    LEVEL 17
                    http://www.javenue.info/post/87
    level17.lesson02.task02
Конфликта не возникает, т.к. никто не запрещает этим самым потоком иметь одновременный доступ к одной и той
же области памяти. На самом деле каждый поток работает со своей копией переменной, т.к. у каждого потока свой
стэк вызовов методов и свои локальные переменные. Так вот, изначально, элементы массива храняться в heap jvm,
т.к. массив это объект, а объекты хранятся в heap. Когда мы создаем поток( при многоядерном процессоре)
каждый поток выполняется на отдельном ядре, и вот поток идет в heap, читает в кэш своего ядра переменную,
что-то с ней там делает, и снова в heap возвращает новое значение переменной. Т.е. поток меняет переменную
не в том месте, где она лежит в памяти, а в своем кэше. А записывает уже на то место, где она храниться в
heap.Может получиться так, несколько ядер(читай потоков) одновременно захотят свое значение записать обратно
в heap jvm, ну так этот конфликт решает уже ОС. А значение останется то, которое вернулось последним.
Советую посмотреть видео Головоча, станет более менее понятно https://www.youtube.com/user/KharkovITCourses/playlists?view=50&flow=list&shelf_id=7.
Смотреть раздел Threads все лекции, т.к. там много полезной инфы, можно не именно этот набор.
---------------------------------------------------
    level17.lesson04.task01 если же следовать условиям задачи и сделать так, то тестирование не проходит:
-----------------------------------------------------
    level17.lesson04.task03
А зачем в классе листы объявлены как funal?
И почему мы в них можем что то добавлять, ведь final переменная это неизменяемая константа?

объявляя лист ты не инициализируешь его содержимое.

то есть я могу инициализоровать его значение всего один раз?

вообще ты задал хороший вопрос =))
public final List<String> fruits = new ArrayList<String>()
это означает, что сам объект fruits ты можешь изменять, как хочешь: добавлять, вычитать, удалять и т.д. НО назначить fruits ссылку на новый объект нельзя, т.е. код
fruits = new ArrayList<String>();
вызовет ошибку.
---------------------------------------------------------------
    level17.lesson04.task04
Реализация Singleton в JAVA http://habrahabr.ru/post/27108/
How do I use a synchronized block in a static method? http://www.avajava.com/tutorials/lessons/how-do-i-use-a-synchronized-block-in-a-static-method.html
http://info.javarush.ru/JavaRush_tasks_discussion/2013/08/31/level17-lesson04-task04.html

    level17.lesson04.task05
-----------------------------------------------
    level17.lesson06.task02
До конца не понятно как работает программа
Почитать про volatile Ключевое слово volatile в Java http://ru.stackoverflow.com/questions/1271/%D0%9A%D0%BB%D1%8E%D1%87%D0%B5%D0%B2%D0%BE%D0%B5-%D1%81%D0%BB%D0%BE%D0%B2%D0%BE-volatile-%D0%B2-java
---------------------------------------------------------------
    level17.lesson10.home02
Дебильное условие, много осталось не понятного про алгоритм приоритета пляжа.
get-теры можно не синхронизировать.
name можно не использовать.
--------------------------------------
    level17.lesson10.home09
Что такое транзакционность???
--------------------------------------------------------------------
    level17.lesson10.bonus02
Прочитать про NoClassDefFoundError
---------------------------
    level17.lesson10.bonus03
Хорошая большая задача про ресторан
http://www.seostella.com/ru/article/2012/08/09/kollekcii-collections-v-java-queue.html
===================================================


    level18.lesson05.task02
https://habrahabr.ru/post/178405/    Правильно освобождаем ресурсы в Java
http://book.itep.ru/10/ascii.htm    Коды символов ASCII
---------------------------------------------------------------
    level18.lesson08.task01
=============================================
http://habrahabr.ru/post/164487/        Многопоточность в Java
=====================================================
    level18.lesson10.home06
\r = CR (Carriage Return) // Used as a new line character in Mac OS before X
\n = LF (Line Feed) // Used as a new line character in Unix/Mac OS X
\r\n = CR + LF // Used as a new line character in Windows
==============================================
    test.level18.lesson10.home10
так Iterator там будет в любом случае, но по новому синтаксису — неявный!
если же ты настаиваешь на явном итераторе, то предлагаю сравнить такие два варианта кода:

for (final Iterator<Map.Entry<Integer, Integer>> i = map.entrySet().iterator(); i.hasNext(); ) {
  final Map.Entry<Integer, Integer> entry = i.next();
  System.out.println("" + entry.getKey() + "=" + entry.getValue());
}
и
for (final Map.Entry<Integer, Integer> entry : map.entrySet()) {
  System.out.println("" + entry.getKey() + "=" + entry.getValue());
}
------------------------
    level18.lesson10.bonus02
OutputStreamWriter позволяет указать кодировку, но не получается именно ДОПИСАТЬ в файл.
FileWriter позволяет ДОПИСАТЬ в файл, но кодировку указать не позволяет
OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream("x.txt", true), "UTF-8");
http://www.skipy.ru/technics/encodings.html

http://info.javarush.ru/JavaRush_tasks_discussion/2013/09/25/level18-lesson10-bonus02.html
----------------------
    level18.lesson10.bonus03
Непонятно почему не проходил мой вариант!!!!!!!!!!!!!!!!!!1
=============================================
    level19.lesson03.task05
Изучить regex
http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html#sum
https://docs.oracle.com/javase/7/docs/api/java/util/regex/Pattern.html
------------------------------------------
    level19.lesson05.task02
\p{Blank} — A space or a tab: [ \t]
\p{Space} — A whitespace character: [ \t\n\x0B\f\r]
\s — A whitespace character: [ \t\n\x0B\f\r]

String regex = "(\\b)[0-9]+(\\s|\\b)";

По данной строке матчер ищет слова которые начинаются цифрами и заканчиваются пробелом или потому
что это просто конец слова.
--
Если пошагово читать выражение то вроде все верно, вот последняя версия

Pattern p = Pattern.compile("^([^\\s]+)\\s(\\d*\\.?\\d*?)$");
От начала строки все что не является пробелом или другим пропуском, но не менее 1 символа,
за которым следует пропуск, после которого цифра, несколько или ни одной, потом точка которой
может и не быть и за ней цифра, которых может быть несколько или не быть вообще, и завершает
все конец строки.
--
\\s здесь лишнее, оно захватывает пробел. А пробел захватывать не нужно, поскольку, если есть
несколько строк
и какая-то строка окончится числом, там пробела уже не будет и во втором файле получится склейка.
Не нужно создавать группу, просто пишем "\\b[0-9]+\\b".
Но ooevg прав — этот паттерн не учитывает буквы внутри слова. Но валидатор почему-то его принимает.
----------------------------------------------------------
    com.javarush.test.level19.lesson10.home05
Интересное решение с использованием:
String[] exnum = {"1","2","3","4","5","6","7","8","9","0"};
----------------------------------------------------------
    level19.lesson10.home10
Изучить:
1)InputStream is = Solution.class.getClassLoader().getResourceAsStream("/user/resources/avatar.gif");
2)vararg  http://allmycircuitz.blogspot.com/2014/08/varargs-java.html

 result instanceof Example
Condition 'result instanceof Object' is redundant and can be replaced with '!= null' less... (Ctrl+F1)
This inspection analyzes method control and data flow to report possible conditions that are always true or false, expressions whose value is statically proven to be constant, and situations that can lead to nullability contract violations.
Variables, method parameters and return values marked as @Nullable or @NotNull are treated as nullable (or not-null, respectively) and used during the analysis to check nullability contracts, e.g. report possible NullPointerException errors.
More complex contracts can be defined using @Contract annotation, for example:
@Contract("_, null -> null") — method returns null if its second argument is null @Contract("_, null -> null; _, !null -> !null") — method returns null if its second argument is null and not-null otherwise @Contract("true -> fail") — a typical assertFalse method which throws an exception if true is passed to it
The inspection can be configured to use custom @Nullable
@NotNull annotations (by default the ones from annotations.jar will be used)

-----------
    level19.lesson10.bonus01
    До конца не понял задачу. Надо разобраться!!!!!!!!!!!!!!!!!1
https://github.com/tyomakr/JavaRushHomeWork/tree/master/src/com/javarush/test
Процент решения задач
http://info.javarush.ru/others/2014/12/13/%D0%9F%D1%80%D0%BE%D1%86%D0%B5%D0%BD%D1%82-%D1%80%D0%B5%D1%88%D0%B5%D0%BD%D0%B8%D1%8F-%D0%B7%D0%B0%D0%B4%D0%B0%D1%87-.html
----------------------
===========================================
    level20.lesson02.task02

Разобраться с enum (valueOf) и SimpleDateFormat
+++
Правильно ли я понял что для работы с датами нужно делать так:
1. для инициализации поля private Date birthDate в методе setBirthDate используем такую конструкцию
user.setBirthDate(new SimpleDateFormat("dd MM yyyy").parse("28 09 1970"));

2. при записи этого поля в файл
user.getBirthDate().getTime()

в файле получаем строку, которая показывает сколько прошло секунд с какой то там базовой даты до 28 09 1970, это — 23320800000
3. при чтении мы преобразуем эту строку в дату
user.setBirthDate(new Date(Long.parseLong(reader.readLine())));

но если захотим эту дату вывести на консоль просто вставив в sout
System.out.println(javaRush.users.get(i).getBirthDate());

то получим
Mon Sep 28 00:00:00 IST 1970

а если так:
System.out.println(new SimpleDateFormat("dd MM yyyy").format(javaRush.users.get(i).getBirthDate()))

то, наконец то получим то что нужно
28 09 1970
----------------------------
    level20.lesson02.task03
Прочитать про Properties, Enumeration, StringTokenizer
---------------------------
    level20.lesson02.task04
Прочитать про рефлексию
https://habrahabr.ru/post/168195/    Разбираемся с hashCode() и equals()
https://habrahabr.ru/post/128017/    Структуры данных в картинках. HashMap
-------------------------------
    level20.lesson04.task01
http://www.ibm.com/developerworks/ru/library/j-5things1/   Пять вещей, которые вы не знали о...
сериализации Java-объектов
http://www.journaldev.com/1789/java-reflection-example-tutorial   Java Reflection Example Tutorial
http://info.javarush.ru/translation/2013/09/14/%D0%A8%D0%B0%D0%B1%D0%BB%D0%BE%D0%BD-%D0%BF%D1%80%D0%BE%D0%B5%D0%BA%D1%82%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-Singleton-%D0%BE%D0%B4%D0%B8%D0%BD%D0%BE%D1%87%D0%BA%D0%B0-%D0%BD%D0%B0%D0%B8%D0%B1%D0%BE%D0%BB%D0%B5%D0%B5-%D1%80%D0%B0%D1%86%D0%B8%D0%BE%D0%BD%D0%B0%D0%BB%D1%8C%D0%BD%D1%8B%D0%B5-%D1%80%D0%B5%D0%B0%D0%BB%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D0%B8-%D0%B2-%D0%BF%D1%80%D0%B8%D0%BC%D0%B5%D1%80%D0%B0%D1%85-.html
Шаблон проектирования Singleton (одиночка), наиболее рациональные реализации в примерах.

--------------------------------
    level20.lesson04.task03
readResolve()
For Serializable and Externalizable classes, the readResolve method allows a class to replace/resolve the object read from the stream before it is returned to the caller. By implementing the readResolve method, a class can directly control the types and instances of its own instances being deserialized.

Для Serializable и Externalizable классов, метод readResolve позволяет классу заменить / разрешить читать объект из потока, прежде чем он возвращается к вызывающему абоненту. При реализации метода readResolve, класс может непосредственно контролировать типы и экземпляры своих собственных экземпляров десериализуемый.
The readResolve method is called when ObjectInputStream has read an object from the stream and is preparing to return it to the caller. ObjectInputStream checks whether the class of the object defines the readResolve method. If the method is defined, the readResolve method is called to allow the object in the stream to designate the object to be returned. The object returned should be of a type that is compatible with all uses. If it is not compatible, a ClassCastException will be thrown when the type mismatch is discovered.
Метод readResolve вызывается, когда ObjectInputStream прочитал объект из потока и готовится к возвращению его к вызывающему абоненту. ObjectInputStream проверяет, определяет ли класс объекта метод readResolve. Если метод определен, readResolve метод вызывается, чтобы позволить объекту в потоке обозначить объект, который будет возвращен. Возвращаемый объект должен быть такого типа, который совместим со всеми видами использования. Если он не совместим, A ClassCastException будет сгенерировано, когда несоответствие типов обнаружено.
Читай по русски, быть может так будет понятней!

http://www.skipy.ru/technics/serialization.html#singleton  Сериализация объектов Singleton

https://sourcemaking.com/design_patterns/singleton   Singleton

https://habrahabr.ru/post/27108/  Реализация Singleton в JAVA

http://javadata.blogspot.ru/2011/12/singleton-and-serialization.html   Singleton and serialization

https://www.youtube.com/watch?v=vyr9GO7dLBQ&feature=youtu.be
http://info.javarush.ru/JavaRush_tasks_discussion/2014/07/03/level20-lesson04-task03.html   коментарии почитать

http://stackoverflow.com/questions/1168348/java-serialization-readobject-vs-readresolve    Java serialization: readObject() vs. readResolve()

http://javatutor.net/articles/using-readresolve
Использование readResolve
-----------------------------------
    level20.lesson04.task04
http://javateaching.blogspot.ru/2011/12/serialization-static-field.html  Сериализация статических полей
-----------------------------------------
http://ccfit.nsu.ru/~deviv/courses/oop/java_ser_rus.html   Изучите секреты Java Serialization API
http://darkraha.com/rus/java/api/serialized.php Справочник по java Сериализация
-------------------------------------------
    level20.lesson10.home01
Непонятно с:
@Override
        public String toString()
        {
            return this.name;
        }
--------------------------------
    level20.lesson10.home03
http://stackoverflow.com/questions/7144912/why-is-a-serializable-inner-class-not-serializable Why is a serializable inner class not serializable?
http://oxygame.blogspot.com.by/2010/11/java.html   Изучаем Java: Сохранение объекта в файл. Сериализация
https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html   Nested Classes
http://info.javarush.ru/translation/2014/04/15/10-%D0%B7%D0%B0%D0%BC%D0%B5%D1%82%D0%BE%D0%BA-%D0%BE-%D0%BC%D0%BE%D0%B4%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%82%D0%BE%D1%80%D0%B5-Static-%D0%B2-Java.html
10 заметок о модификаторе Static в Java
http://0agr.ru/blog/2011/05/30/%D0%BA%D0%BE%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D0%BE%D1%80-%D0%BF%D0%BE-%D1%83%D0%BC%D0%BE%D0%BB%D1%87%D0%B0%D0%BD%D0%B8%D1%8E-%D0%B8-%D1%81%D0%BE%D1%85%D1%80%D0%B0%D0%BD%D0%B5%D0%BD%D0%B8/
Конструктор по умолчанию и сохранение целостности классов в Java
-----------------------
    level20.lesson10.home03
Очень хорошая задача
-----------------------
http://www.intuit.ru/studies/courses/16/16/lecture/27133?page=3
http://www.slideshare.net/MERA_school/5-java-lecture-io
--------------------------
    level20.lesson10.home08
    Хорошая задача!!!!!!
-------------------------------------
========================================
                        level21
    level21.lesson02.task02
Сумма слагаемых это оператор OR. Класс!
А если к сумме сделать логическое И со слагаемым, то будет слагаемое.

В числе 2 в степени n в единицу выставлен только (n+1)-й бит. Все остальные — нули.
http://habrahabr.ru/post/187606/
----------------------
    level21.lesson05.task01
https://javarevisited.blogspot.com/2011/02/how-to-write-equals-method-in-java.html
https://habrahabr.ru/post/169733/   Заметки о реализации hashCode() в Java
https://habrahabr.ru/post/168195/   Разбираемся с hashCode() и equals()
---------------------------
http://howtodoinjava.com/core-java/cloning/a-guide-to-object-cloning-in-java/
http://info.javarush.ru/translation/2014/03/22/Java-Core-%D0%92%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%BA-%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8E-%D1%87-3.html
https://habrahabr.ru/post/132465/   Плохая Java или как не надо делать
http://info.javarush.ru/translation/2013/10/08/%D0%A7%D0%B0%D1%81%D1%82%D0%BE-%D0%B7%D0%B0%D0%B4%D0%B0%D0%B2%D0%B0%D0%B5%D0%BC%D1%8B%D0%B5-%D0%BD%D0%B0-%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F%D1%85-%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%BF%D0%BE-%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%B0%D0%BC-%D0%BA%D0%BE%D0%BB%D0%BB%D0%B5%D0%BA%D1%86%D0%B8%D1%8F%D0%BC-%D0%B2-Java-%D0%A7%D0%B0%D1%81%D1%82%D1%8C-1-.html
http://docs.oracle.com/javase/specs/jls/se7/html/jls-6.html#jls-6.6.1
http://indragni.com/blog/2012/07/24/java-cloning-tutorial/
------------------------------
    level21.lesson10.task01
http://netjs.blogspot.com.by/2015/05/try-with-resources-java7.html
http://stackoverflow.com/questions/2506488/when-is-the-finalize-method-called-in-java
https://habrahabr.ru/post/183344/
http://src-code.net/sborka-musora-i-metod-finalize/
https://habrahabr.ru/post/130370/
http://www.javamadesoeasy.com/2015/05/exceptions-top-60-interview-questions_16.html
http://stackoverflow.com/questions/18683996/object-finalize-method-ignoring-exceptions-thrown

http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.3
http://www.skipy.ru/technics/encodings.html
-------------------------------------
============================================
    level22.lesson13.task02
Разобраться с порядком кодировки
---------------------------------------------
    level22.lesson13.task03
Разобраться с RegEx
RegexBuddy 4.1.3
http://www.friendlyfunction.com/ru/category/java/regular-expressions/
http://regexr.com/
-------------------------------------------------
    Ответы на вопросы Уровня 22 к собеседованию
    http://info.javarush.ru/tag/%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B%20%D0%BA%20%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8E/
http://info.javarush.ru/zor07/2016/06/16/%D0%A3%D1%80%D0%BE%D0%B2%D0%B5%D0%BD%D1%8C-22-%D0%9E%D1%82%D0%B2%D0%B5%D1%82%D1%8B-%D0%BD%D0%B0-%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%BA-%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8E-%D0%BF%D0%BE-%D1%82%D0%B5%D0%BC%D0%B5-%D1%83%D1%80%D0%BE%D0%B2%D0%BD%D1%8F-_2.html
------------------------------------------------
    test.level22.lesson18.big01
https://habrahabr.ru/post/211747/ Знаете ли Вы массивы?
http://java-course.ru/begin/multi-array/ Многомерные массивы
http://prologistic.com.ua/dvumerny-e-massivy-v-java.html  Двумерные массивы в Java
================================================
    level23.lesson04.task01
http://www.beingjavaguys.com/2013/10/inner-class-example-in-java.html
----------------------------------------------------
    Ответы на вопросы к собеседованию Уровня 23
http://info.javarush.ru/zor07/2016/06/19/%D0%A3%D1%80%D0%BE%D0%B2%D0%B5%D0%BD%D1%8C-23-%D0%9E%D1%82%D0%B2%D0%B5%D1%82%D1%8B-%D0%BD%D0%B0-%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D1%8B-%D0%BA-%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8E-%D0%BF%D0%BE-%D1%82%D0%B5%D0%BC%D0%B5-%D1%83%D1%80%D0%BE%D0%B2%D0%BD%D1%8F-.html
-----------------------------------------------------
    Прочитать про устройство компьютеров
http://lwn.net/Articles/250967/     What every programmer should know about memory, Part 1
http://lwn.net/Articles/255364/     Memory part 5: What programmers can do
------------------------------------------------------
    level23.lesson08.home01
    //reflection
    //you have to know that it is possible to create new instance of T (generic type) class by using its default constructor
    private T getNewInstanceOfGenericType() throws InstantiationException, IllegalAccessException {
        return (T) ((Class) ((ParameterizedType) this.getClass().
                getGenericSuperclass()).getActualTypeArguments()[0]).newInstance();
    }

=============================================
    level24
Про final в локальных анонимных классах (анонимные классы в методах)
http://javatalks.ru/topics/40223
http://javastudy.ru/interview/java-oop2/
Внутренний класс не может изменить локальную переменную метода
https://habrahabr.ru/post/133237/   Малоизвестные особенности Java
http://info.javarush.ru/javarush_articles/2015/12/04/%D0%9A%D0%BE%D0%BD%D1%81%D1%82%D1%80%D1%83%D0%BA%D1%82%D0%BE%D1%80%D1%8B-%D0%BA%D0%BB%D0%B0%D1%81%D1%81%D0%BE%D0%B2-Java-JDK-1-5-.html
Конструкторы классов. Java JDK 1.5.
--------------------------------------------
    level24.lesson04.home01
Полезная задача про рефакторинг
----------------------------------------------
    level24.lesson06.home01
Тоже хорошая задача
-------------------------------------------------
    test.level24.lesson06.home02

http://tutorials.jenkov.com/java-internationalization/simpledateformat.html

http://info.javarush.ru/JavaRush_tasks_discussion/2014/02/26/level24-lesson06-home02-.html
http://stackoverflow.com/questions/1235179/simple-way-to-repeat-a-string-in-java/1316608#1316608

String scream="";
for (int j = 0; j < i; j++) scream+="а";
return i<=0 ? getName()+" спит." : getName()+" лает г"+scream+"в! "+formatter.format(new Date());

new String(new char[i]).replace("\0", "а")

// create a string made up of  n  copies of  s
repeated = String.format(String.format("%%%ds", n), " ").replace(" ",s);

//You can make the solution less ugly and easier to understand:
String.format("%0"+n+"d", 0).replace("0", s)
------------------------------------------
    level24.lesson09.task01
http://info.javarush.ru/JavaRush_tasks_discussion/2014/02/06/level24-lesson09-task01.html
------------------------------------------------
    level24.lesson09.task02
Интересная задача про ChoiceFormat, MessageFormat
==========================================
    level25.lesson02.home01
Хорошая задача на понимание enum
----------------------------------------------
    level25.lesson05.home01
Про многопоточность полезные ссылки
http://www.w3resource.com/java-tutorial/java-threadclass-methods-and-threadstates.php
http://www.datadisk.co.uk/html_docs/java/threads.htm
http://programmersstack.blogspot.com.by/2008/01/java-thread-states-new-runnable-running.html
http://www.uml-diagrams.org/examples/java-6-thread-state-machine-diagram-example.html
https://habrahabr.ru/post/164487/
http://www.journaldev.com/1072/java-daemon-thread-example
=================================================
    level26.lesson02.task01
Задача про медиану (интересная)
https://edunow.su/site/content/algorithms/poisk_mediany
http://www.pm298.ru/mediana.php
-----------------------------------------------
    level26.lesson02.task03
такс, даю биг хинт)
алгоритм сравнения таков:
1) У нас имеется один или несколько компараторов (которые передаются в конструктор нашего мультикомпараторского класса CustomizedComparator =) допустим нам их передали аж три.
2) Внутри метода compare() перебираем в цикле переданные нам компараторы в той последовательности в которой они были нам переданы.
3) Внутри цикла сравниваем переданные в метод compare() (класса CustomizedComparator) объекты (T o1 и T o2) методом compare() первого из переданных компараторов.
4) Если результат сравнения != 0 (т.е. объекты различаются по критерию (колонке) первого из компараторов) то возвращаем результат их сравнения, и выходим тем самым из цикла и из метода. (остальные переданные компараторы нас в таком случае уже не интересуют!!! =))
5) Если же результат сравнения в первом компараторе == 0, то продолжаем в цикле дальше перебирать компараторы до тех пор пока или результат сравнения будет != 0, или не закончатся компараторы и цикл завершится (в этом случае возвращаем 0, это будет означать что объекты T o1 и T o2 по всем трём критериям (колонкам) равны).
как — то так, вроде бы всё понятно объяснил)
-------------------
Почитать про многопоточность
https://habrahabr.ru/company/luxoft/blog/157273/
http://howtodoinjava.com/core-java/multi-threading/thread-synchronization-object-level-locking-and-class-level-locking/
http://www.skipy.ru/technics/synchronization.html#monitors

---------------------------
    level26.lesson08.task03
   Мега крутая и классная задача!!!!!!!!!!!!!!!!!!!
Алгоритм примерно такой. Пусть надо найти остаток от деления 26 на 5.
1) Переходим в двоичную систему счисления. Получаем 26=11010 и 5=101.
2) Как видим, делимое имеет пять значащих разрядов, а делитель - три. Сдвинем делитель на 5-3=2
разряда, получим 10100. Это число меньше 11010. Вычтем: 11010-10100= 110
3) остаток из п. 2 имеет то же число значащих разрядов и больше делителя. Вычтем: 110-101=1
4) Получили остаток 1. Это и есть ответ.
То есть, деление сводится к двоичным сдвигам и вычитаниям.

http://ru.onlinemschool.com/math/practice/arithmetic/residue/
http://dxdy.ru/topic52984.html
http://info.javarush.ru/translation/2013/10/22/%D0%9A%D0%B0%D0%BA-%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D0%B0%D0%B5%D1%82-HashMap-%D0%B2-Java.html
https://habrahabr.ru/post/128017/#putForNullKey
---------------------
    level26.lesson10.task01
http://pastebin.com/defTeiej
------------------------------------------
    level26.lesson10.home02
Про interrupted в цикле и try - catch

Прерывания работы нити (interrupte thread)
http://info.javarush.ru/others/2016/06/21/Прерывания-работы-нити-interrupte-thread-.html

Теория и практика Java: Работа с InterruptedException
http://www.ibm.com/developerworks/ru/library/j-jtp05236/index.html
----------------------------------------------
    level26.lesson15.big01
Разобраться с жадным алгоритмом!!!!!!!
Так же алгоритм не выводит минимальное количество банкнот для операции, н-р при сумме 600.
На счету:
500 2
200 3
10 10

а результат должен быть
200 3

Backing a ResourceBundle with Properties Files
http://docs.oracle.com/javase/tutorial/i18n/resbundle/propfile.html

Вавилонское столпотворение. Часть 2. Локализация и ресурсы
http://www.skipy.ru/technics/localization.html
============================================================
    level27.lesson02.task02
Разобраться с вложенными циклами
-----------------------------------
    test.level27.lesson09.task01
Почитать статью на  https://habrahabr.ru/post/277669/  Справочник по синхронизаторам java.util.concurrent.*
-------------------------------------
    level27.lesson09.home01
Хорошая задача на понимание wait/notify/notifyAll
http://www.java-samples.com/showtutorial.php?tutorialid=306   wait(), notify() and notifyAll() in Java - A tutorial
========================================
    level28.lesson02.task01
Интересная задача про switch и enum
почитать про enum
http://info.javarush.ru/translation/2015/10/13/15-%D0%B2%D0%BE%D0%BF%D1%80%D0%BE%D1%81%D0%BE%D0%B2-%D0%B4%D0%BB%D1%8F-%D1%81%D0%BE%D0%B1%D0%B5%D1%81%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F-%D1%80%D0%B0%D0%B7%D1%80%D0%B0%D0%B1%D0%BE%D1%82%D1%87%D0%B8%D0%BA%D0%BE%D0%B2-%D0%BE%D1%82%D0%BD%D0%BE%D1%81%D0%B8%D1%82%D0%B5%D0%BB%D1%8C%D0%BD%D0%BE-Enum-%D0%B2-%D0%94%D0%B6%D0%B0%D0%B2%D0%B5-%D1%81-%D0%BE%D1%82%D0%B2%D0%B5%D1%82%D0%B0%D0%BC%D0%B8-.html
http://javabeat.net/how-to-use-enum-in-switch/
--------------------------------------
    level28.lesson04.task01
Understanding Custom ThreadFactory In Java
http://wilddiary.com/understanding_custom_threadfactory_in_java/#threadNaming
-----------------------------------
    level28.lesson04.task02
http://www.concretepage.com/java/jdk7/threadlocalrandom-java-example
--------------------------------------
    level28.lesson06.task01
Как избежать ConcurrentModificationException при пользовании коллекциями
https://dev64.wordpress.com/2013/03/11/how-to-deal-with-concurrent-modification-exception/
-----------------------------
    level28.lesson08.task01
ExecutorService
http://tutorials.jenkov.com/java-util-concurrent/executorservice.html
Пять вещей, которые вы не знали о ... пакете java.util.concurrent. Часть 2
http://www.ibm.com/developerworks/ru/library/j-5things5/index.html
Многопоточность в Java: ExecutorService
https://habrahabr.ru/post/116363/
=========================================
    level29.lesson02.task01
Naming conventions for java methods that return boolean(No question mark)
http://stackoverflow.com/questions/3874350/naming-conventions-for-java-methods-that-return-booleanno-question-mark
----------------------------------------
    level29.lesson05.task02
про особенности автобоксинга
https://sohabr.net/habr/post/201334/
----------------------------------
    level29.lesson09.task01
Представление чисел в двоичном коде с плавающей запятой   IEEE 754
http://digteh.ru/proc/float/
==============================================
    level30.lesson08.task01
Интересная задача по битам и сдвигам.
----------------------------------
    level30.lesson08.home01
Магические аолгоритмы на булевой алгебре

The Aggregate Magic Algorithms
http://aggregate.org/MAGIC/

What does the ^ operator do in Java?
http://stackoverflow.com/questions/1991380/what-does-the-operator-do-in-java

Операции над примитивными типами в Java
http://info.javarush.ru/javarush_articles/2015/12/03/Операции-над-примитивными-типами-в-Java.html

Arithmetic shift
https://en.wikipedia.org/wiki/Arithmetic_shift

Даны две переменные - a и b. Например, они равны a=2; b=3. Необходимо поменять местами
эти числа (то есть a=3, b=2). Но не используя третью переменную.
1.
a = a + b;
b = a - b;
a = a - b;
2.
a = a ^ b;
b = b ^ a;
a = a ^ b;
==============================================================
    level31.lesson02.home02
Интересная задача про поиск файлов через очередь (queue).
Пишем очередь на Java
http://javadevblog.com/pishem-ochered-na-java.html
Пишем стек на java
http://javadevblog.com/pishem-stek-na-java.html
How do I instantiate a Queue object in java?
http://stackoverflow.com/questions/4626812/how-do-i-instantiate-a-queue-object-in-java
------------------------------------------------------------
    level31.lesson04.home01

NIO (Java, обучающая статья)
http://www.quizful.net/post/java-nio-tutorial

Files является служебным классом, это означает, что это final-класс с private-конструктором и содержит только статические методы

Про варарг vararg varargs var-args
Баг в Java Var-arg Overloading
http://ru.stackoverflow.com/questions/190690/java-var-arg-overloading
Java : Methods with Variable Argument Lists (var-args)
http://www.javaxp.com/2011/04/java-methods-with-variable-argument.html
When do you use varargs in Java?
http://stackoverflow.com/questions/766559/when-do-you-use-varargs-in-java
----------------------------------------------------------------
    level31.lesson04.home02
Интересная задача про поиск файлов в каталоге через walkFileTree SimpleFileVisitor
Walking the File Tree
https://docs.oracle.com/javase/tutorial/essential/io/walk.html
NIO (Java, обучающая статья)
http://www.quizful.net/post/java-nio-tutorial

Path walkFileTree(Path start, FileVisitor<!--? super Path--> visitor)
Path walkFileTree(Path start, Set<filevisitoption> options, int maxDepth, FileVisitor<!--? super Path--> visitor)
Оба метода принимают путь, с которого начнётся обход дерева и экземпляр типа FileVisitor,
который будет определять поведение при обходе дерева. Второй метод имеет два дополнительных
параметра: Set, содержащий опции обхода, и максимальную глубину. Максимальная глубина
определяет, насколько уровней каталогов будет происходить обход. Если в её качестве указать 0,
то будет рассматриваться только указанный файл, а если указать MAX_VALUE, то будут пройдены
все подкаталоги.
-----------------------------------------------------------
    level31.lesson06.home01;
Полезная задача про ZipEntry . Напомнило про OutputStream, InputStream .
Работа с ZIP-архивами
http://metanit.com/java/tutorial/6.12.php
How to compress files in ZIP format
https://www.mkyong.com/java/how-to-compress-files-in-zip-format/
---------------------------------------------------------
    level31.lesson06.bonus01
С использованием SequenceInputStream задача получается красивее.
--------------------------------------------------------









    level17.lesson10.bonus01;
Почему-то так не работает:
         boolean f = strArr[2].equals("м") ? allPeople.add(Person.createMale(strArr[1], new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH).parse(strArr[3]))) :
                   allPeople.add(Person.createFemale(strArr[1], new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH).parse(strArr[3])));
А так нормально:
allPeople.add(strArr[2].equals("м") ?
            Person.createMale(strArr[1], new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH).parse(strArr[3])) :
            Person.createFemale(strArr[1], new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH).parse(strArr[3])));

if (strArr[2].equals("м"))
                allPeople.add(Person.createMale(strArr[1], new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH).parse(strArr[3])));
            else
                allPeople.add(Person.createFemale(strArr[1], new SimpleDateFormat("dd/MM/yyyy", Locale.ENGLISH).parse(strArr[3])));




Особенности Java 8 – максимальное руководство (часть 2)
http://info.javarush.ru/translation/2014/10/09/%D0%9E%D1%81%D0%BE%D0%B1%D0%B5%D0%BD%D0%BD%D0%BE%D1%81%D1%82%D0%B8-Java-8-%D0%BC%D0%B0%D0%BA%D1%81%D0%B8%D0%BC%D0%B0%D0%BB%D1%8C%D0%BD%D0%BE%D0%B5-%D1%80%D1%83%D0%BA%D0%BE%D0%B2%D0%BE%D0%B4%D1%81%D1%82%D0%B2%D0%BE-%D1%87%D0%B0%D1%81%D1%82%D1%8C-2-.html

Теория и практика Java: Введение в неблокирующие алгоритмы
http://www.ibm.com/developerworks/ru/library/j-jtp04186/index.html

Java - doc на русском
http://spec-zone.ru/RU/Java/Docs/7/api/allclasses-noframe.html

!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!








