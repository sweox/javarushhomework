package com.javarush.test.level15.lesson12.home05;

/* Перегрузка конструкторов
1. В классе Solution создайте по 3 конструктора для каждого модификатора доступа.
2. В отдельном файле унаследуйте класс SubSolution от класса Solution.
3. Внутри класса SubSolution создайте конструкторы командой Alt+Insert -> Constructors.
4. Исправьте модификаторы доступа конструкторов в SubSolution так, чтобы они соответствовали
конструкторам класса Solution.
*/

public class Solution {
    private Solution(char c) {}
    private Solution(Character g) {}
    private Solution(Float F) {}

    Solution() {}
    Solution(double d) {}
    Solution(Double D) {}

    public Solution(int i) {}
    public Solution(Integer I) {}
    public Solution(float f) {}

    protected Solution(String g) {}
    protected Solution(Object O) {}
    protected Solution(boolean b) {}
}
/*
Ты меня не понял. Конструктор по умолчанию — это конструктор без параметров. В моем
родительском классе не было такого, а т.к. конструктор с нужной мне сигнатурой у
родителя невиден (т.к. он private), то мой наследник обращается к родительскому
конструктору по умолчанию, а он у меня не был определен. Вот и вся проблема.)))
Модификатор доступа тут не при чем.
///============================
У меня программа прошла тест. 12 перегруженных конструкторов, имелся и по умолчанию(обьявлен
как public), тоже перегружен, является одним из 12. Private — конструкторы тоже перегружала
(в ручную).
Тут один момент, как я поняла, для создания private — конструкторов в классе наследнике,
не нужно участие private — конструкторов супер-класса, вернее оно явно запрещено самим
модификатором private. Т.е. модификатор private сам говорит: «нет, не надо не перегружай
меня, этим я и отличаюсь от других, меня незьзя использовать в других классах». Private —
конструкторы в классе наследнике используют любой другой конструктор не private супер-класса.
Также должно иметься соответствие параметров конструктора класса-наследника и конструктора
супер-класса, тут надо вспомнить тему о «Преобразовании типов». Например, в моем решении,

private SubSolution(Character param){
super(param);
}

мог использовать

Solution(double param){
}

, т.е. второй будет перегружен первым) получается, что конструктор супер класса в данной
задаче может быть перегружен несколько раз. Если обьявить рrivate — конструктор в классе
наследнике, не используя никакой другой конструктор супер-класса ( например,

private SubSolution(Long param){

}

) или используя конструктор супер-класса по умолчанию (

private SubSolution(Long param){
super();
}

), то будет задействован конструктор по умолчанию супер-класса

Solution(){
}

с любым модификатором, кроме private. Помним, что в таком случае конструктор по-умолчанию
супер-класса должен быть явно объявлен, т.к. объявлены и другие конструкторы супер-классов.
*/

/*
public class Solution {
}
*/

