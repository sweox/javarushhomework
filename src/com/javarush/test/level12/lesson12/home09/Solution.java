package com.javarush.test.level12.lesson12.home09;

/* Родитель класса CTO
Добавь такой класс-родитель к классу CTO(технический директор), чтобы класс перестал быть абстрактным.
Добавлять/реализовывать методы в классе CTO запрещается.
*/

/**
 *
 т.е. есть две… сущности(не знаю как обозвать класс и интерфейс) и у каждой есть метод воркхард. у интерфейса без
 реализации, у класса воркер — с реализацией, но они и знать не знают, что есть сущность с таким же(по имени) методом
 как и неё самой. Класс же СТО наследует и от интерфейса, и от класса, и если бы имена методов были разные, то
 реализацию метода из интерфейса пришлось писать бы в СТО. Но поскольку имена и параметры методов одинаковые, то
 реализацию мы цепляем из наследуемого класса воркер, притом что «они(класс воркер и интерфейс) и знать не знают»
 друг о друге, и по сути это 2 разных метода. А теперь вопрос: прав ли я или это глюк?
 nomerat

 Прав. Суть проверки со стороны интерфейса — в классе (который реализует интерфейс) должен быть метод с сигнатурой
 метода интерфейса, чтобы через переменную интерфейса можно было вызвать метод сигнатура которого описана в интерфейсе.
 Это пример полиморфизма. Тут как, по сути в интерфейсе нет никакого метода, есть имя. С этим именем переменная типа
 интерфейс может обратится к классу реализующему интерфейс и сказать ему «вызываю метод с таким то именем и таким то
 набором параметров» и он уже в классе должен быть. Как он там оказался, дело десятое.

 */

public class Solution
{

    public static void main(String[] args)
    {
        CTO cto = new CTO();
        System.out.println(cto);
    }

    public static interface Businessman
    {
        public void workHard();
    }
    public static class Ww
    {
        public void workHard() {}
    }

    public static class CTO extends Ww implements Businessman
    {

    }


}

/**
public class Solution
{

    public static void main(String[] args)
    {
        CTO cto = new CTO();
        System.out.println(cto);
    }

    public static interface Businessman
    {
        public void workHard();
    }

    public static class CTO  implements Businessman
    {

    }


}
*/