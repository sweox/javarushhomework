package com.javarush.test.level06.lesson11.home04;

/* Минимальное количество static-ов
Расставьте минимальное количество static-ов, чтобы код начал работать, и программа успешно завершилась
*/

public class Solution
{
    public static int step;

    public static void main(String[] args) {
        method1();
    }

    public static void method1() {
        method2();
    }


    public static void method2() {
        new Solution().method3();
    }

    public void method3() {
        method4();
    }

    public void method4() {
        step++;
        for (StackTraceElement element : Thread.currentThread().getStackTrace())
            System.out.println(element);
        if (step > 1) return;
        main(null);
    }
}
/**Подумайте почему программа делает это бесконечно при не static переменной public int step;

 Метод public static void method2() каждый раз создает новый экземпляр класса с не инициализированной
 переменной  public int step;

 Таким образом условие if (step > 1) return; — никогда не выполниться и программа бесконечно повторяет
 метод main.
 ==============================
 смотрите, методы main и первый метод инициализируются до создания экземпляра класса, а во втором
 методе мы создаем объект(экземпляр класса) Solution, поэтому смысла в статиках в третьем и четвертом
 методе нет, так как они все-равно прогрузятся после создания объекта. почитайте вот это:
 <code>http://java-course.ru/begin/static/</code>
 ===============================
 и еще для понимания static вот это помогло мне очень, кто-то здесь на форуме написал, спасибо ему большое:
 Используя экземпляр класса можно доступиться:
 1) ко всем полям класса
 2) ко всем статическим полям
 Используя имя класса можно доступиться:
 1) только ко всем статическим полям
 ===============================
 В method2() создается экземпляр класса Solution, у которого есть статическое поле step.
 Следом сразу вызывается метод method3()
 new Solution().method3();

 В методе method3() вызывается method4() (фактически this.method4(), или method4(this) понятнее,
 где this ссылка на созданный экземпляр класса Solution).
 Соответственно в method4() фактически происходит
 this.step++;

 Надеюсь объяснил понятно.
 ===============================
 Само функционирование программы понятно.

 Вопрос был в том, как можно обращаться к step вот так: step++;, а не так Solution.step++; —
 ведь step мы сделали статическим и обращение происходит из нестатического метода4?

 Как step преодолевает значение 1, я кажется сообразил: это вытекает из определения стат переменных —
 переменная существует в одном экземпляре и поэтому создание новых экземпляров класса Solution на нее
 никак не влияет. (Поправьте меня, пожалуйста если я здесь не прав)

 Спасибо!
 ==================================
 Это из статического метода мы не можем вызвать не статический (без создания экземпляра класса),
 потому что в этом случае, у нас нет ссылки на объект (this).
 А из не статического вызвать статический проблем нет. У нас есть ссылка на объект (перечитайте
 лекцию касательно стат.полей и ссылки this), а у объекта есть стат поле (даже не смотря на то,
 что оно стат, мы можем обратиться к нему как к обычному полю).
 =======================================
*/
