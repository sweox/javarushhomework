package test.outer;

/**
 * Created by BELSHINA on 26.03.2016.
 */
public class Outer
{
    private String x = "instance variable";
//    String z = "local variable";
    float r = (float) (1 + 0.9);
    byte b = (byte)1000;
    void doStuff() {
        final String z = "local variable";
        class Ineer{
            public void seeOuter() {
                System.out.println("Outer x is: " + x);
                System.out.println("Lical variable z is: " + z);
            }
        }
    }
}


    /*В случае с локальной переменной в методе - эта переменная не используется внутренним
классом, а копируется в новую переменную. То есть твой локальный z и твой z внутри
Inner класса - это две разные переменные. Почему объявлять такую локальную переменную
нужно как final? Только потому что разработчики тогда еще Sun'a посчитали что иначе
это приведет к большому количеству багов и недопониманий - народ будет думать что
изменяют все ту же переменную z.

        В случае с полем - тут совсем другая ситуация. Твой внутренний класс всегда может
обращаться к внешнему, у него есть ссылка на внешний объект. И он может изменять
поля самого внешнего класса, это не просто переменная которая скопировалась - изменив
это поле ты изменишь поле Outer класса.*/


